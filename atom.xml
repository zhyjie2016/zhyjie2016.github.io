<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎来到赵彦杰的博客</title>
  
  <subtitle>生命不息，奋斗不止</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhyjie2016.github.io/"/>
  <updated>2018-03-07T07:38:52.710Z</updated>
  <id>http://zhyjie2016.github.io/</id>
  
  <author>
    <name>赵彦杰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>02_1_django配置mysql数据库</title>
    <link href="http://zhyjie2016.github.io/2018/03/07/02-1-django%E9%85%8D%E7%BD%AEmysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://zhyjie2016.github.io/2018/03/07/02-1-django配置mysql数据库/</id>
    <published>2018-03-07T06:30:41.000Z</published>
    <updated>2018-03-07T07:38:52.710Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h3 id="注意：环境为python2时才能安装MySqldb模块"><a href="#注意：环境为python2时才能安装MySqldb模块" class="headerlink" title="注意：环境为python2时才能安装MySqldb模块"></a>注意：环境为python2时才能安装MySqldb模块</h3><h3 id="django支持的数据库"><a href="#django支持的数据库" class="headerlink" title="django支持的数据库"></a>django支持的数据库</h3><ul><li>PostgreSQL    #没有使用过这个</li><li>MySQL         #今天主要说这个</li><li>SQLite        #django默认的就是这个</li><li>Oracle        #没有用过</li><li><strong><del>MongoDB</del></strong> # <strong>不支持！</strong> 如果在django中使用MongoDB，需要自己手动设置响应的扩展</li></ul><p>下面是setting.py中默认的数据库设置，默认数据库为sqlite3</p><pre><code># Database# https://docs.djangoproject.com/en/1.8/ref/settings/#databasesDATABASES = {    &apos;default&apos;: {        &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,        &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),    }}</code></pre><p>###修改数据库为MySQL</p><p>在settings.py文件中修改DATABASES字段如下：</p><pre><code>DATABASES = {    &apos;default&apos;: {        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,        &apos;NAME&apos;: &apos;xblog&apos;,    ## 数据库名称        &apos;USER&apos;: &apos;root&apos;,        &apos;PASSWORD&apos;: &apos;password&apos;,    ## 安装 mysql 数据库时，输入的 root 用户的密码        &apos;HOST&apos;: &apos;127.0.0.1&apos;,    }}</code></pre><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><h4 id="1-Ubuntu中安装MySQL"><a href="#1-Ubuntu中安装MySQL" class="headerlink" title="1.Ubuntu中安装MySQL"></a>1.Ubuntu中安装MySQL</h4><pre><code>$ sudo apt-get install mysql-server mysql-client## 在过程中按照提示输入 mysql root 用户的密码，此密码将用于 settings.py 中。</code></pre><p>安装完成之后，命令行进入mysql:</p><pre><code>$ mysql -u root -pEnter password: ## 输入 mysql root 用户密码，进入数据库</code></pre><p>创建数据库 xblog</p><pre><code>mysql&gt; create database xblog default charset utf8 collate utf8_general_ci;Query OK, 1 row affected (0.20 sec)</code></pre><h4 id="2-安装MySQLdb"><a href="#2-安装MySQLdb" class="headerlink" title="2.安装MySQLdb"></a>2.安装MySQLdb</h4><pre><code>(env_django)shengan@ubuntu:~/mysite$ pip install mysql-python</code></pre><p>若安装过程有问题，可安装下述软件包，然后再安装MySQLdb</p><pre><code>sudo apt-get install python-setuptoolssudo apt-get install libmysqld-devsudo apt-get install libmysqlclient-devsudo apt-get install python-dev</code></pre><p>进入python交互式命令行，输入<code>import MySQLdb</code>，未报错即表示安装成功：</p><pre><code>&gt;&gt;&gt; import MySQLdb    ## 未报错即表示安装成功</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;注意：环境为python2时才能安装MySqldb模块&quot;&gt;&lt;a href=&quot;#注意：环境为python2时才能安装MySqldb模块&quot; class=&quot;headerlink&quot; title=&quot;注意：环境为python2时才能安装My
      
    
    </summary>
    
    
      <category term="django" scheme="http://zhyjie2016.github.io/tags/django/"/>
    
      <category term="MySQL" scheme="http://zhyjie2016.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>02_django博客的数据库模型</title>
    <link href="http://zhyjie2016.github.io/2018/03/01/02-django%E5%8D%9A%E5%AE%A2%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A8%A1%E5%9E%8B/"/>
    <id>http://zhyjie2016.github.io/2018/03/01/02-django博客的数据库模型/</id>
    <published>2018-03-01T10:56:41.000Z</published>
    <updated>2018-03-01T10:57:27.570Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编写博客模型代码"><a href="#编写博客模型代码" class="headerlink" title="编写博客模型代码"></a>编写博客模型代码</h3><p>django将数据库的语法转换成了python的语法形式。我们只写python代码就可以，django会把python代码翻译成对应的数据库操作语言。用专业说法就是，django为我们提供了一套ORM（Object Relational Mapping）系统。举例说明：</p><pre><code>blog/models.pyfrom django.db import modelsclass Category(models.Model):  #类名会转换成表名    name = models.CharField(max_length=100) #表中的一个列名为name，还有一个id列，django会自动生成</code></pre><p><strong>注意：代码中含有中文注释，如果你直接 copy 代码到你的文本编辑器且使用了 Python 2 开发环境的话，会得到一个编码错误。因此请在文件最开始处加入编码声明：# coding: utf-8。</strong></p><pre><code>blog/models.pyfrom django.db import modelsfrom django.contrib.auth.models import Userclass Category(models.Model):    &quot;&quot;&quot;    Django 要求模型必须继承 models.Model 类。    Category 只需要一个简单的分类名 name 就可以了。    CharField 指定了分类名 name 的数据类型，CharField 是字符型，    CharField 的 max_length 参数指定其最大长度，超过这个长度的分类名就不能被存入数据库。    当然 Django 还为我们提供了多种其它的数据类型，如日期时间类型 DateTimeField、整数类型 IntegerField 等等。    Django 内置的全部类型可查看文档：    https://docs.djangoproject.com/en/1.10/ref/models/fields/#field-types    &quot;&quot;&quot;    name = models.CharField(max_length=100)class Tag(models.Model):    &quot;&quot;&quot;    标签 Tag 也比较简单，和 Category 一样。    再次强调一定要继承 models.Model 类！    &quot;&quot;&quot;    name = models.CharField(max_length=100)class Post(models.Model):    &quot;&quot;&quot;    文章的数据库表稍微复杂一点，主要是涉及的字段更多。    &quot;&quot;&quot;    # 文章标题    title = models.CharField(max_length=70)    # 文章正文，我们使用了 TextField。    # 存储比较短的字符串可以使用 CharField，但对于文章的正文来说可能会是一大段文本，因此使用 TextField 来存储大段文本。    body = models.TextField()    # 这两个列分别表示文章的创建时间和最后一次修改时间，存储时间的字段用 DateTimeField 类型。    created_time = models.DateTimeField()    modified_time = models.DateTimeField()    # 文章摘要，可以没有文章摘要，但默认情况下 CharField 要求我们必须存入数据，否则就会报错。    # 指定 CharField 的 blank=True 参数值后就可以允许空值了。    excerpt = models.CharField(max_length=200, blank=True)    # 这是分类与标签，分类与标签的模型我们已经定义在上面。    # 我们在这里把文章对应的数据库表和分类、标签对应的数据库表关联了起来，但是关联形式稍微有点不同。    # 我们规定一篇文章只能对应一个分类，但是一个分类下可以有多篇文章，所以我们使用的是 ForeignKey，即一对多的关联关系。    # 而对于标签来说，一篇文章可以有多个标签，同一个标签下也可能有多篇文章，所以我们使用 ManyToManyField，表明这是多对多的关联关系。    # 同时我们规定文章可以没有标签，因此为标签 tags 指定了 blank=True。    # 如果你对 ForeignKey、ManyToManyField 不了解，请看教程中的解释，亦可参考官方文档：    # https://docs.djangoproject.com/en/1.10/topics/db/models/#relationships    category = models.ForeignKey(Category)    tags = models.ManyToManyField(Tag, blank=True)    # 文章作者，这里 User 是从 django.contrib.auth.models 导入的。    # django.contrib.auth 是 Django 内置的应用，专门用于处理网站用户的注册、登录等流程，User 是 Django 为我们已经写好的用户模型。    # 这里我们通过 ForeignKey 把文章和 User 关联了起来。    # 因为我们规定一篇文章只能有一个作者，而一个作者可能会写多篇文章，因此这是一对多的关联关系，和 Category 类似。    author = models.ForeignKey(User)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;编写博客模型代码&quot;&gt;&lt;a href=&quot;#编写博客模型代码&quot; class=&quot;headerlink&quot; title=&quot;编写博客模型代码&quot;&gt;&lt;/a&gt;编写博客模型代码&lt;/h3&gt;&lt;p&gt;django将数据库的语法转换成了python的语法形式。我们只写python代码就可以，d
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>01_Django建立博客应用</title>
    <link href="http://zhyjie2016.github.io/2018/03/01/01-Django%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2%E5%BA%94%E7%94%A8/"/>
    <id>http://zhyjie2016.github.io/2018/03/01/01-Django建立博客应用/</id>
    <published>2018-03-01T08:35:34.000Z</published>
    <updated>2018-03-01T08:42:42.563Z</updated>
    
    <content type="html"><![CDATA[<p>django鼓励将自己编写的代码组织到应用里（Application），且最好一个应用只提供一种功能。我们可以在<strong>激活的虚拟环境中</strong>，在工程目录的根目录下，</p><h3 id="创建一个blog应用"><a href="#创建一个blog应用" class="headerlink" title="创建一个blog应用"></a>创建一个blog应用</h3><pre><code>&gt;python manage.py startapp blog</code></pre><p>manage.py是我们的工程管理助手</p><h3 id="应用的目录结构"><a href="#应用的目录结构" class="headerlink" title="应用的目录结构"></a>应用的目录结构</h3><p>进入<code>工程目录\blog\</code>文件夹，文件结构如下</p><pre><code>blog\    __init__.py    admin.py    apps.py    migrations\        __init__.py    models.py    tests.py    views.py</code></pre><p>现在blog只是一个文件夹，django还不知道这是一个应用。需要在django的配置文件中注册这个应用.</p><p>打开 <code>工程目录\</code>下的setting.py文件，找到<code>INSTALLED_APP</code>设置项，将<code>blog</code>应用添加进去</p><pre><code>blogproject/blogproject/settings.py## 其他配置项...INSTALLED_APPS = [    &apos;django.contrib.admin&apos;,    &apos;django.contrib.auth&apos;,    &apos;django.contrib.contenttypes&apos;,    &apos;django.contrib.sessions&apos;,    &apos;django.contrib.messages&apos;,    &apos;django.contrib.staticfiles&apos;,    &apos;blog&apos;, # 注册 blog 应用]## 其他配置项...</code></pre><p>通用功能django已写好，我们只需要编写与自身业务相关的功能代码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;django鼓励将自己编写的代码组织到应用里（Application），且最好一个应用只提供一种功能。我们可以在&lt;strong&gt;激活的虚拟环境中&lt;/strong&gt;，在工程目录的根目录下，&lt;/p&gt;
&lt;h3 id=&quot;创建一个blog应用&quot;&gt;&lt;a href=&quot;#创建一个blog应
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>00_Django环境要求</title>
    <link href="http://zhyjie2016.github.io/2018/03/01/00-Django%E7%8E%AF%E5%A2%83%E8%A6%81%E6%B1%82/"/>
    <id>http://zhyjie2016.github.io/2018/03/01/00-Django环境要求/</id>
    <published>2018-03-01T06:42:03.000Z</published>
    <updated>2018-03-01T06:42:42.325Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h3><p>检测python是否可以正常运行，在命令行输入<code>python -V</code>,如果输出python的版本号，说明python已经安装成功</p><pre><code>#在CMD中输入下列命令&gt;python -VPython 3.5.2</code></pre><h3 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h3><p>安装virtualenv</p><pre><code>&gt;pip install virtualenv</code></pre><p>在指定的目录中运行CMD，创建虚拟环境</p><pre><code>&gt;virtualenv [虚拟环境文件夹]</code></pre><p>建好虚拟环境后需要激活虚拟环境，运行[虚拟环境文件夹]\Scripts\目录下的activate程序激活</p><pre><code>&gt;[虚拟文件夹路径]\Scripts\activate（[虚拟环境目录]）C:\WINDOWS\system32&gt;</code></pre><p>看到命令提示符前多了（[虚拟环境目录]），说明已经激活了虚拟环境</p><h3 id="安装django"><a href="#安装django" class="headerlink" title="安装django"></a>安装django</h3><p>在虚拟环境下进行操作</p><pre><code>&gt;pip install django==1.10.6</code></pre><p>查看django版本</p><pre><code>(blogproject_env) C:\WINDOWS\system32&gt;pythonPython 3.5.2 (v3.5.2:4def2a2901a5, Jun 25 2016, 22:18:55) [MSC v.1900 64 bit (AMD64)] on win32Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; import django&gt;&gt;&gt; print(django.get_version())1.10.6</code></pre><h3 id="建立django工程"><a href="#建立django工程" class="headerlink" title="建立django工程"></a>建立django工程</h3><p>django工程(Project)是我们项目代码的容器。</p><p>首先在命令行进入到 C:\Users\yangxg\Workspace 这个目录</p><pre><code>(blogproject_env) C:\WINDOWS\system32&gt;cd C:\Users\yangxg\Workspace</code></pre><p><strong>注意</strong> windows中不同盘符间跳转时，需要先<code>&gt;盘符：</code>跳到目标盘符后再跳转</p><p>运行如下命令创建工程：</p><pre><code>(blogproject_env) C:\Users\yangxg\Workspace&gt;django-admin startproject blogproject</code></pre><h3 id="Hello-Django"><a href="#Hello-Django" class="headerlink" title="Hello Django"></a>Hello Django</h3><p>在工程目录下运行如下命令,在本地开启一个Web服务器</p><pre><code>&gt;python manage.py runserver [8000]</code></pre><p>端口号默认8000，启动服务器时可以进行设置</p><pre><code>(blogproject_env) C:\Users\yangxg\Workspace&gt;cd C:\Users\yangxg\Workspace\blogproject(blogproject_env) C:\Users\yangxg\Workspace\blogproject&gt;python manage.py runserverPerforming system checks...System check identified no issues (0 silenced).You have 13 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.Run &apos;python manage.py migrate&apos; to apply them.December 21, 2016 - 20:23:07Django version 1.10.4, using settings &apos;blogproject.settings&apos;Starting development server at http://127.0.0.1:8000/Quit the server with CTRL-BREAK.</code></pre><p>在浏览器输入127.0.0.1：8000或localhost：8000 可以看到django已经开始工作了</p><h4 id="django语言和时区设置"><a href="#django语言和时区设置" class="headerlink" title="django语言和时区设置"></a>django语言和时区设置</h4><p>打开setting.py文件，找到如下两行代码：</p><pre><code>blogproject/blogproject/settings.py## 其它配置代码...LANGUAGE_CODE = &apos;en-us&apos;TIME_ZONE = &apos;UTC&apos;## 其它配置代码...</code></pre><p>改为如下配置</p><pre><code>blogproject/blogproject/settings.py## 其它配置代码...# 把英文改为中文LANGUAGE_CODE = &apos;zh-hans&apos;# 把国际时区改为中国时区TIME_ZONE = &apos;Asia/Shanghai&apos;## 其它配置代码...</code></pre><p><strong>保存更改后</strong>关闭setting.py文件.再次启动服务器，可以看到django支持中文了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装python&quot;&gt;&lt;a href=&quot;#安装python&quot; class=&quot;headerlink&quot; title=&quot;安装python&quot;&gt;&lt;/a&gt;安装python&lt;/h3&gt;&lt;p&gt;检测python是否可以正常运行，在命令行输入&lt;code&gt;python -V&lt;/code&gt;,
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在gitHub上使用hexo搭建博客</title>
    <link href="http://zhyjie2016.github.io/2018/02/28/%E5%9C%A8gitHub%E4%B8%8A%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://zhyjie2016.github.io/2018/02/28/在gitHub上使用hexo搭建博客/</id>
    <published>2018-02-28T03:56:48.000Z</published>
    <updated>2018-03-07T07:27:48.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1准备阶段"><a href="#1准备阶段" class="headerlink" title="1准备阶段"></a>1准备阶段</h2><ul><li>安装git客户端</li><li>注册GitHub-》创建仓库 <strong>（仓库名必须是<br>用户名.github.io）</strong></li><li>配置SSH<blockquote><ol><li>打开Git Bash终端：</li><li>设置user name和email：</li></ol></blockquote></li></ul><blockquote><pre><code>git config --global user.name &quot;你的GitHub用户名&quot;</code></pre></blockquote><blockquote><pre><code>git config --global user.email &quot;你的GitHub注册邮箱&quot;</code></pre><p>3.生成ssh密钥</p></blockquote><blockquote><pre><code>ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code></pre></blockquote><pre><code>不需要设置密码，直接回车就好。</code></pre><p>此时，在用户文件夹下就有一个.ssh的文件夹，里面有刚刚创建的ssh密钥文件id_rsa和id_rsa.pub</p><blockquote><p>4.添加公钥到github:<br>5.测试SSH：<br>    ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a><br>如出现如下确认信息：</p></blockquote><pre><code>The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.RSA key fingerprint is 17:24:ac:a5:76:28:24:36:62:1b:36:4d:eb:df:a6:45.Are you sure you want to continue connecting (yes/no)?</code></pre><blockquote><p>输入yes后回车</p></blockquote><blockquote><p>显示如下信息则OK</p></blockquote><pre><code>Hi SeayXu! You&apos;ve successfully authenticated,but GitHub does not provide shell access.</code></pre><ul><li>安装Nodejs</li><li><p>安装Hexo</p><pre><code>npm install hexo-cli -g</code></pre></li></ul><h2 id="Hexo搭建本地博客"><a href="#Hexo搭建本地博客" class="headerlink" title="Hexo搭建本地博客"></a>Hexo搭建本地博客</h2><ol><li><p>创建博客文件夹：这里取名为blog</p></li><li><p>进入blog文件夹，在这里操作cmd命令</p></li><li><p>hexo初始化</p><pre><code>hexo init</code></pre></li></ol><ol><li><p>安装依赖</p><pre><code>npm install</code></pre></li><li><p>启动hexo</p><pre><code>hexo server</code></pre><p> 启动之后，打开浏览器，在地址栏输入：<a href="http://localhost:4000，可以看到Hexo的实例页面" target="_blank" rel="noopener">http://localhost:4000，可以看到Hexo的实例页面</a></p></li></ol><ol><li><p>新建文章：</p><pre><code>hexo new &lt;title&gt;</code></pre><p> 在sourse文件夹下生成的<code>&lt;title&gt;.md</code>是文章文件，在里面进行编辑</p></li><li><p>生成静态页面：</p><pre><code>hexo generate</code></pre><p> 生成的静态内容在public文件夹内</p></li><li><p>清除生成的内容</p><pre><code>hexo clean</code></pre><p> 执行此操作会删除public文件夹内的内容</p></li><li><p>部署Hexo</p><ul><li><p>编辑配置文件，关联远程仓库：</p><p>  在编辑器中打开Hexo配置文件 <strong>_config.yml</strong>,找到下面内容：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type:</code></pre><p>  添加github仓库信息：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:SeayXu/seayxu.github.io.git #github仓库地址  branch: master # github分支</code></pre><blockquote><p>注意：type、repo、branch的前面有两个空格，后面的:后面有一个空格</p></blockquote></li><li><p>安装git插件</p><pre><code>npm install hexo-deployer-git --save</code></pre></li><li><p>部署</p><pre><code>hexo deploy</code></pre><p>  该操作会将hexo生成的内容部署到配置的仓库中</p></li></ul></li></ol><h3 id="注意每次发布前，需要先将-deploy-git文件夹删除以后再发布，才能正常发布，不然没有效果"><a href="#注意每次发布前，需要先将-deploy-git文件夹删除以后再发布，才能正常发布，不然没有效果" class="headerlink" title="注意每次发布前，需要先将 .deploy_git文件夹删除以后再发布，才能正常发布，不然没有效果"></a>注意每次发布前，需要先将 <code>.deploy_git</code>文件夹删除以后再发布，才能正常发布，不然没有效果</h3><p>一个不错的教程</p><pre><code>http://www.lovebxm.com/2017/05/30/buildBlog/</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1准备阶段&quot;&gt;&lt;a href=&quot;#1准备阶段&quot; class=&quot;headerlink&quot; title=&quot;1准备阶段&quot;&gt;&lt;/a&gt;1准备阶段&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装git客户端&lt;/li&gt;
&lt;li&gt;注册GitHub-》创建仓库 &lt;strong&gt;（仓库名必须是&lt;br&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>markdown基础</title>
    <link href="http://zhyjie2016.github.io/2018/02/28/markdown%E5%9F%BA%E7%A1%80/"/>
    <id>http://zhyjie2016.github.io/2018/02/28/markdown基础/</id>
    <published>2018-02-28T03:41:05.000Z</published>
    <updated>2018-02-28T03:42:03.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="段落："><a href="#段落：" class="headerlink" title="段落："></a>段落：</h1><p>一个段由一个以上的连接的行句组成；而一个以上的空行则会划分出不同的段落</p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>md支持两种标题的语法，Setext和atx形式。Setext形式是用底线的形式，利用=（最高阶标题）和-（第二阶标题），Atx形式在行首插入1到6个#，对应到标题1到6阶</p><h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><h5 id="5"><a href="#5" class="headerlink" title="5"></a>5</h5><h6 id="6"><a href="#6" class="headerlink" title="6"></a>6</h6><h1 id="区块引用"><a href="#区块引用" class="headerlink" title="区块引用"></a>区块引用</h1><p>使用email形式的”&gt;”角括号</p><h1 id="修辞和强调："><a href="#修辞和强调：" class="headerlink" title="修辞和强调："></a>修辞和强调：</h1><p>md使用星号(底线)来标记需要强调的区段</p><p><em>单个标记表示斜体</em></p><p><strong>两个标记表示加粗</strong></p><p><strong><em>三个标记表示斜体加粗</em></strong></p><p><del>2个波浪线表示删除线</del></p><p><u>下划线</u></p><font color="red">带颜色字体（红色）</font><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p><strong>无序列表：</strong> 使用星号/加号/减号来作为列表的项目标记。<strong>注意：</strong> 符号后面需要有空格</p><p><strong>使用星号：</strong></p><ul><li>Candy.</li><li>Gum.</li><li>Booze</li></ul><p><strong>使用加号：</strong></p><ul><li>Candy.</li><li>Gum.</li><li>Booze.</li></ul><p><strong>使用减号：</strong></p><ul><li>Candy.</li><li>Gum.</li><li>Booze.</li></ul><p><strong>有序列表：</strong> 则是使用一般的数字接着一个英文句点, <strong>注意：</strong> 之间需要有空格</p><ol><li>Red</li><li>Green</li><li>Blue</li></ol><p>如果在项目之间插入空行，项目内容会用</p><p>包起来，也可以在一个项目上放上多个段落，只要在他前面缩排4个空白或一个tab</p><ul><li><p>A list item.</p><p>  1With multiple paragraphs.</p><p>  2</p></li><li><p>Another item in the list.</p></li></ul><h1 id="连接："><a href="#连接：" class="headerlink" title="连接："></a>连接：</h1><p>md支持两种形式的连接语法：行内和参考<br>使用方括号</p><p><strong>行内连接</strong></p><p>This is an <a href="http://example.com/" target="_blank" rel="noopener">example link</a></p><p>也可以选择性的加上title属性：This is an <a href="http://example.com/" title="With a Title" target="_blank" rel="noopener">example link</a>.</p><p><strong>参考连接</strong></p><p>I get 10 times more traffic from <a href="http://google.com/" title="Google" target="_blank" rel="noopener">Google</a> than from<br><a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="noopener">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="noopener">MSN</a>.</p><p>title属性时选择性的，连接名称可以用字母、数字和空格，但是不分大小写</p><p>I start my morning with a cup of coffee and<br><a href="http://www.nytimes.com/" target="_blank" rel="noopener">The New York Times</a>.</p><h1 id="图片："><a href="#图片：" class="headerlink" title="图片："></a>图片：</h1><p>图片的语法和连接很像。</p><p>行内形式（title是选择性的）:</p><pre><code>![alt text](/path/to/img.jpg &quot;Title&quot;)</code></pre><p><img src="/path/to/img.jpg" alt="alt text" title="Title"></p><pre><code>![alt text][id][id]: /path/to/img.jpg &quot;Title&quot;</code></pre><p><img src="/path/to/img.jpg" alt="alt text" title="Title"></p><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><p>在一般的段落文字中，可以使用反引号来标记代码区段，区段内的&amp;、&lt;和&gt;都会被自动的转换成HTML实体，这项特性可以很容易的在代码区段内插入HTML码：</p><p>I strongly recommend against using any <code>&lt;blink&gt;</code> tags.</p><p>I wish SmartyPants used named entities like <code>&amp;mdash;</code><br>instead of decimal-encoded entites like <code>&amp;#8212;</code>.</p><p>如果要建立一个已经格式好的代码区块，只要每行缩进4个空格或者一个tab就可以。而&amp;,&lt;和&gt;也一样会自动转成HTML实体</p><pre><code>If you want your page to validate under XHTML 1.0 Strict,you&apos;ve got to put paragraph tags in your blockquotes:&lt;blockquote&gt;&lt;p&gt;For example.&lt;/p&gt;&lt;/blockquote&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;段落：&quot;&gt;&lt;a href=&quot;#段落：&quot; class=&quot;headerlink&quot; title=&quot;段落：&quot;&gt;&lt;/a&gt;段落：&lt;/h1&gt;&lt;p&gt;一个段由一个以上的连接的行句组成；而一个以上的空行则会划分出不同的段落&lt;/p&gt;
&lt;h1 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://zhyjie2016.github.io/2018/02/28/hello-world/"/>
    <id>http://zhyjie2016.github.io/2018/02/28/hello-world/</id>
    <published>2018-02-28T03:34:18.158Z</published>
    <updated>2018-02-28T03:34:18.158Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
